---
schema:
  type: currency
  '#currencies': All currencies used on your server.
  currencies:
    '#money': |-
      This is an example currency called \"money\".
      You can rename this by changing the word \"money\".
      You can also add new currencies by duplicating the whole block below.
    money:
      '#default': Default amount of money when the account is created
      default: 100
      '#min': |-
        The minimum amount of money in this account.
        If set to negative, this account can have a negative balance (i.e. overdraft).
      min: 0
      '#max': |-
        The maximum amount of money in this account.
        If this value has more than 10 digits, it may cause problems in some platforms.
      max: 100000000
      '#import-from': |-
        Accounts from the specified sources will be converted to this account type.

        Enabling this option does NOT import the database from other databases.
        Please use the migration tool to import the database first,
        then enable this option to start importing accounts for new players.

        This option does NOT affect players who already have an account of this type.

        Possible values: ~ (do not import), economyapi
      import-from: economyapi
  '#term': |-
    The name of the command argument for the currency.
    Also used in forms when to select the currency.
  term: currency
  '#default-currency': |-
    The default currency to use in commands if the user does not specify one.
    If this is set to ~, the user is required to specify the currency for every command.
    This option can be overridden in the config for individual commands.
  default-currency: ~
'#': |-
  This is the main config file of Capital.
  You can change the values in this file to configure Capital.
  If you change some main settings that change the structure (e.g. schema), Capital will try its best
  to migrate your previous settings to the new structure and overwrite this file.
  The previous file will be stored in config.yml.old.
'#analytics': Settings related to statistics display.
analytics:
  '#player-infos': |-
    The InfoAPI infos for a player.
    An info is a number related to the wealth or activities of a player,
    e.g. the total amount of money, amount of money in a specific currency,
    average spending per day, total amount of money earned from a specific source, etc.

    After setting up infos, you can use them in the info-commands section below.
  player-infos:
    '#money': This is an example info that displays the total money of a player.
    money:
      '#of': |-
        The data source of this info.
        If set to "account", the info is calculated from statistics of some of the player's accounts.
        If set to "transaction", the info is calculated from statistics of the player's recent transactions.
      of: account
      '#selector': Selects which accounts of the player to calculate.
      selector:
        '#currency': The currency to use.
        currency: money
      '#metric': |-
        The statistic used to combine multiple values.

        Possible values:
        - "account-count": The number of accounts selected.
        - "balance-sum": The sum of the balances of the accounts selected.
        - "balance-mean": The average balance of the accounts selected.
        - "balance-variance": The variance of the balances of the accounts selected.
        - "balance-min": The minimum balance of the accounts selected.
        - "balance-max": The maximum balance of the accounts selected.
      metric: balance-sum
      '#update-frequency': |-
        The frequency in seconds at which the info is refreshed from the server.
        This will only affect displays and will not affect transactions.
      update-frequency: 5
  '#info-commands': |-
    Commands that display information about a player.
    You can use the infos defined in the player-infos section above,
    as well as usual InfoAPI commands.
  info-commands:
    '#checkmoney': This is an example command that checks the total money of a player
      using the {money} info defined above.
    checkmoney:
      '#description': The description message of this command.
      description: Check money of yourself or another player
      '#self-requires-op': |-
        If set to true, only ops can use this command for self
        (you can further configure this with permission plugins).
      self-requires-op: false
      '#other-requires-op': |-
        If set to true, only ops can use this command for other
        (you can further configure this with permission plugins).
      other-requires-op: true
      '#format': |-
        The format of command output.
        Use InfoAPI syntax here.
      format: '{name} has ${money}.'
  '#top-player-commands': |-
    A top-player command lets you create commands that discover the top players in a certain category.
    It provides the answer to questions like "who is the richest player?" or
    "who spent the most money last week?".
  top-player-commands:
    '#richest': This is an example top-player command that shows the richest players.
    richest:
      '#command': The command that displays the information.
      command:
        '#description': The description message of this command.
        description: Displays the richest player
        '#requires-op': |-
          If set to true, only ops can use this command
          (you can further configure this with permission plugins).
        requires-op: false
      '#selector': Selects which accounts of each player to calculate.
      selector:
        '#currency': The currency to use.
        currency: money
      '#ordering': |-
        Whether to sort results ascendingly or descendingly.
        Use "asc" for ascending sort and "desc" for descending sort.
      ordering: desc
      '#metric': |-
        The statistic used to combine multiple values.

        Possible values:
        - "account-count": The number of accounts selected.
        - "balance-sum": The sum of the balances of the accounts selected.
        - "balance-mean": The average balance of the accounts selected.
        - "balance-variance": The variance of the balances of the accounts selected.
        - "balance-min": The minimum balance of the accounts selected.
        - "balance-max": The maximum balance of the accounts selected.
      metric: balance-sum
      '#refresh': |-
        Refresh settings for the top query.
        These settings depend on how many active accounts you have in the database
        as well as how powerful the CPU of your database server is.
        Try increasing the frequencies and reducing batch size if the database server is lagging.
      refresh:
        '#batch-size': |-
          Number of players to recompute at once.
          Data are only recomputed if they are older than recompute-frequency.
          Try reducing this value if the database server is having lag spikes.
        batch-size: 200
        '#batch-frequency': |-
          The number of seconds between batches.

          If there are multiple servers connected to the same database,
          the batch frequency is scheduled independently on each server,
          but the CPU and memory consumed are still on the database server.
          You may want to multiply this frequency by the number of servers.
        batch-frequency: 10
        '#recompute-frequency': |-
          The number of seconds for which metrics are considered valid and will not be recomputed.

          Originally, the metrics of a player are recomputed every (batch-frequency * number-of-active-accounts / batch-size) seconds.
          This wastes CPU and memory on the database server if there are too few active accounts.
          Setting a higher recompute-frequency reduces the frequency of recomputation and saves electricity,
          but the top list results may be more outdated.
          Note that recompute-frequency does nothing if it is lower than (batch-frequency * number-of-active-accounts / batch-size).
        recompute-frequency: 86400
      '#pagination': Pagination settings for the top query.
      pagination:
        '#per-page': Number of top players to display per page
        per-page: 5
        '#limit': Total number of top players to display through this command.
        limit: 5
      '#messages': Configures the displayed messages
      messages:
        '#header': The top line of the page.
        header: Showing page {page} of {totalPages}
        '#entry': This line is repeated for each entry in the page.
        entry: '#{rank} {name}: ${value}'
        '#footer': The bottom line of the page.
        footer: ""
'#transfer': '"transfer" tells Capital what methods admins and players can send money
  through.'
transfer:
  '#payment-commands': These are payment commands from one player to another player.
  payment-commands:
    '#pay': An example command that pays money to another player
    pay:
      '#description': The description message of this command.
      description: Pays another player
      '#requires-op': |-
        If set to true, only ops can use this command
        (you can further configure this with permission plugins).
      requires-op: false
      '#selector': Select which account to pay from and to
      selector:
        '#default-currency': |-
          The default currency to use in commands if the user does not specify one.
          If this is set to ~, the user is required to specify the currency for every command.
          This option can be overridden in the config for individual commands.
        default-currency: ~
        '#allowed-currencies': The list of currencies the user can select from.
        allowed-currencies: ~
      '#rate': |-
        The exchange rate, or how much of the original money is sent.
        When using "currency" schema, this allows transferring between
        accounts of different currencies.
      rate: 1
      '#minimum-amount': The minimum amount of money that can be transferred each
        time.
      minimum-amount: 0
      '#maximum-amount': |-
        The maximum amount of money that can be transferred each time.
        Write ~ if the transfer amount is unlimited.
        The actual amount is still subject to the account limits set in the schema section.
      maximum-amount: ~
      '#fee': This is taken directly out of the source account before money is transferred.
      fee: 0
      '#transaction-labels': |-
        These are labels to add to the transaction.
        You can match by these labels to identify how players earn and lose money.
        Labels are formatted using InfoAPI syntax.
      transaction-labels:
        payment: ""
      messages:
        '#player-only-command': Sent to command sender if this command requires them
          to be player and they are not.
        player-only-command: '{red}Only players may use this command.'
        '#notify-sender-success': Sent to command sender on success.
        notify-sender-success: '{green}You have sent ${sentAmount} to {target}. You
          now have ${sender money} left.'
        '#notify-recipient-success': Sent to recipient on success.
        notify-recipient-success: '{green}You have received ${receivedAmount} from
          {sender}. You now have ${target money} left.'
        '#underflow': Sent when too much money is withdrawn.
        underflow: '{red}You do not have ${sentAmount}.'
        '#overflow': Sent when too much money is given.
        overflow: '{red}The accounts of {target} are full. They cannot fit in ${sentAmount}
          more.'
        '#internal-error': Sent when an unexpected error occurs.
        internal-error: '{red}An internal error occurred. Please try again.'
  '#add-money-commands': These are commands that allow admins to add money to a player.
  add-money-commands:
    '#addmoney': Adds money to a player
    addmoney:
      '#description': The description message of this command.
      description: Add money to a player
      '#requires-op': |-
        If set to true, only ops can use this command
        (you can further configure this with permission plugins).
      requires-op: true
      '#minimum-amount': The minimum amount of money that can be transferred each
        time.
      minimum-amount: 0
      '#maximum-amount': The maximum amount of money that can be transferred each
        time.
      maximum-amount: ~
      '#transaction-labels': |-
        These are labels to add to the transaction.
        You can match by these labels to identify how players earn and lose money.
        Labels are formatted using InfoAPI syntax.
      transaction-labels:
        operator: ""
      messages:
        '#player-only-command': Sent to command sender if this command requires them
          to be player and they are not.
        player-only-command: '{red}Only players may use this command.'
        '#notify-sender-success': Sent to command sender on success.
        notify-sender-success: '{green}{target} has received ${receivedAmount}. They
          now have ${target money} left.'
        '#notify-recipient-success': Sent to recipient on success.
        notify-recipient-success: '{green}You have received ${receivedAmount}. You
          now have ${target money} left.'
        '#underflow': Sent when too much money is withdrawn.
        underflow: '{red}An internal error occurred.'
        '#overflow': Sent when too much money is given.
        overflow: '{red}{target} cannot fit ${receivedAmount} more money.'
        '#internal-error': Sent when an unexpected error occurs.
        internal-error: '{red}An internal error occurred. Please try again.'
  '#take-money-commands': These are commands that allow admins to take money from
    a player.
  take-money-commands:
    '#takemoney': Takes money to a player
    takemoney:
      '#description': The description message of this command.
      description: Remove money from a player
      '#requires-op': |-
        If set to true, only ops can use this command
        (you can further configure this with permission plugins).
      requires-op: true
      '#minimum-amount': The minimum amount of money that can be transferred each
        time.
      minimum-amount: 0
      '#maximum-amount': The maximum amount of money that can be transferred each
        time.
      maximum-amount: ~
      '#transaction-labels': |-
        These are labels to add to the transaction.
        You can match by these labels to identify how players earn and lose money.
        Labels are formatted using InfoAPI syntax.
      transaction-labels:
        operator: ""
      messages:
        '#player-only-command': Sent to command sender if this command requires them
          to be player and they are not.
        player-only-command: '{red}Only players may use this command.'
        '#notify-sender-success': Sent to command sender on success.
        notify-sender-success: '{green}You have taken ${receivedAmount} from {target}.
          They now have ${target money} left.'
        '#notify-recipient-success': Sent to recipient on success.
        notify-recipient-success: '{green}An admin took ${sentAmount} from you. You
          now have ${target money} left.'
        '#underflow': Sent when too much money is withdrawn.
        underflow: '{red}{target} does not have ${sentAmount}.'
        '#overflow': Sent when too much money is given.
        overflow: '{red}An internal error occurred.'
        '#internal-error': Sent when an unexpected error occurs.
        internal-error: '{red}An internal error occurred. Please try again.'
'#migration': |-
  The "migration" module lets you import data from other economy plugins into Capital.
  The import happens when you run the `/capital-migrate` command.
migration:
  '#enabled': Whether to enable the migration command.
  enabled: true
  '#source': |-
    The data source where the data to migrate are located.
    The data are not loaded until you run the `/capital-migrate` command.
  source:
    '#plugin': |-
      The plugin to import from.

      Possible values:
      - economyapi
    plugin: economyapi
    '#provider': |-
      The provider type in EconomyAPI/config.yml

      Possible values:
      - "yaml": The (default) YAML data provider in EconomyAPI. The path to Money.yml should be specified below.
      - "mysql": The MySQL data provider in EconomyAPI. The connection details should be specified below.
    provider: yaml
    '#path': The path to the YAML file in EconomyAPI.
    path: /data/plugin_data/EconomyAPI/Money.yml
    '#multiplier': |-
      The ratio to multiply each balance value by.
      Capital only supports integer balances,
      so if you want to preserve the decimal portions,
      you have to multiply them by 10 etc.
    multiplier: 1
...
